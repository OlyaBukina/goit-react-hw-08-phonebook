{"version":3,"file":"static/js/698.0d426081.chunk.js","mappings":"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","sources":["redux/contacts/contacts-selectors.js","components/ContactsForm/formValidation.js","components/ContactsForm/ContactsForm.js","components/Modal/Modal.js","components/ContactItem/ContactItem.js","components/ContactsList/ContactsList.js","components/Filter/Filter.js","components/Notification/Notification.js","pages/Contacts.js"],"sourcesContent":["import { createSelector } from '@reduxjs/toolkit';\n\nexport const selectContacts = state => state.contacts;\n\nexport const selectFilter = state => state.filter;\n\nexport const selectVisibleContacts = createSelector(\n  [selectFilter, selectContacts],\n  (filter, { items }) => {\n    const normalizeFilter = filter.toLowerCase().trim();\n\n    return items.filter(contact =>\n      contact.name.toLowerCase().includes(normalizeFilter)\n    );\n  }\n);\n","import * as yup from 'yup';\n\nexport const contactsSchema = yup.object().shape({\n  name: yup\n    .string()\n    .required('Name is a required field!')\n    .min(2, 'Too short name!')\n    .matches(\n      /^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$/,\n      `Name may contain only letters, apostrophe, dash and spaces. For example Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan`\n    ),\n\n  number: yup\n    .string()\n    .required('Number is a required field!')\n    .matches(\n      /\\+?\\d{1,4}?[-.\\s]?\\(?\\d{1,3}?\\)?[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,9}/,\n      `Phone number must be digits and can contain spaces, dashes, parentheses and can start with +`\n    ),\n});\n","import { useDispatch, useSelector } from 'react-redux';\nimport { useForm } from 'react-hook-form';\nimport { yupResolver } from '@hookform/resolvers/yup';\nimport { selectContacts } from 'redux/contacts/contacts-selectors';\n\nimport { TextField, Container, Button, Box, Grid } from '@mui/material';\nimport { contactsSchema } from './formValidation';\n\nexport const ContactsForm = ({\n  onSave,\n  actionOnSubmit,\n  actionBtnText,\n  contact = {},\n}) => {\n  const { items } = useSelector(selectContacts);\n  const dispatch = useDispatch();\n\n  const {\n    register,\n    handleSubmit,\n    reset,\n    formState: { errors },\n  } = useForm({\n    resolver: yupResolver(contactsSchema),\n  });\n\n  const onSubmit = data => {\n    const contactExists = items.find(\n      ({ name }) => name.toLowerCase() === data.name.toLowerCase()\n    );\n    if (contactExists) {\n      alert(`${data.name} is already in contacts.`);\n      return;\n    }\n    dispatch(actionOnSubmit({ ...contact, ...data }));\n    onSave();\n    reset();\n  };\n\n  return (\n    <Container\n      component=\"div\"\n      sx={{\n        marginTop: 2,\n        display: 'flex',\n        flexDirection: 'column',\n        alignItems: 'center',\n      }}\n    >\n      <Box component=\"form\" noValidate onSubmit={handleSubmit(onSubmit)}>\n        <Grid container spacing={2}>\n          <Grid item xs={12}>\n            <TextField\n              {...register('name')}\n              error={errors.name ? true : false}\n              helperText={errors.name?.message}\n              autoComplete=\"given-name\"\n              name=\"name\"\n              defaultValue={contact?.name}\n              required\n              fullWidth\n              id=\"name\"\n              label=\"Name\"\n              autoFocus\n              sx={{ textTransform: 'capitalize' }}\n            />\n          </Grid>\n\n          <Grid item xs={12}>\n            <TextField\n              {...register('number')}\n              error={errors.number ? true : false}\n              helperText={errors.number?.message}\n              required\n              fullWidth\n              id=\"number\"\n              label=\"Phone number\"\n              defaultValue={contact?.number}\n              name=\"number\"\n              autoComplete=\"number\"\n            />\n          </Grid>\n        </Grid>\n        <Button\n          type=\"submit\"\n          fullWidth\n          variant=\"contained\"\n          sx={{ mt: 3, mb: 2 }}\n        >\n          {actionBtnText}\n        </Button>\n      </Box>\n    </Container>\n  );\n};\n","import { Box, Modal, IconButton } from '@mui/material';\nimport CloseIcon from '@mui/icons-material/Close';\n\nconst style = {\n  position: 'absolute',\n  top: '50%',\n  left: '50%',\n  transform: 'translate(-50%, -50%)',\n  maxWidth: '75%',\n  bgcolor: 'background.paper',\n  borderRadius: 2.5,\n  boxShadow: 24,\n  pt: 2,\n  px: 4,\n  pb: 3,\n};\n\nexport const ModalWrapper = ({ children, onClose, open }) => {\n  return (\n    <Modal\n      open={open}\n      onClose={onClose}\n      aria-labelledby=\"child-modal-title\"\n      aria-describedby=\"child-modal-description\"\n    >\n      <Box sx={{ ...style }}>\n        <IconButton\n          type=\"button\"\n          onClick={onClose}\n          aria-label=\"close\"\n          sx={{ position: 'absolute', top: '8px', right: '8px' }}\n        >\n          <CloseIcon />\n        </IconButton>\n        {children}\n      </Box>\n    </Modal>\n  );\n};\n","import PropTypes from 'prop-types';\nimport { useState } from 'react';\nimport { useDispatch } from 'react-redux';\nimport {\n  deleteContact,\n  updateContact,\n} from 'redux/contacts/contacts-operations';\nimport { ContactsForm } from '../ContactsForm/ContactsForm';\nimport { ModalWrapper } from '../Modal/Modal';\nimport DeleteIcon from '@mui/icons-material/Delete';\nimport EditIcon from '@mui/icons-material/Edit';\nimport {\n  IconButton,\n  Typography,\n  ListItem,\n  ListItemAvatar,\n  Avatar,\n  ListItemText,\n} from '@mui/material';\n\nexport const ContactItem = ({ contact }) => {\n  const dispatch = useDispatch();\n  const [isModalOpen, setIsModalOpen] = useState(false);\n\n  const toggleModal = () => setIsModalOpen(state => !state);\n\n  const handleDelete = () => dispatch(deleteContact(id));\n\n  const { id, name, number } = contact;\n  const avatarLetter = name.slice(0, 1).toUpperCase();\n  return (\n    <ListItem alignItems=\"center\" sx={{ borderBottom: '1px solid #9e9e9e' }}>\n      <ListItemAvatar>\n        <Avatar sx={{ bgcolor: '#cdc1d5' }}>{avatarLetter}</Avatar>\n      </ListItemAvatar>\n      <ListItemText\n        primary={\n          <Typography\n            component=\"p\"\n            variant=\"subtitle1\"\n            fontSize=\"18px\"\n            fontWeight=\"700\"\n            sx={{ textTransform: 'capitalize' }}\n          >\n            {name}\n          </Typography>\n        }\n        secondary={\n          <Typography\n            sx={{ display: 'inline' }}\n            component=\"span\"\n            variant=\"body2\"\n            color=\"text.primary\"\n          >\n            {number}\n          </Typography>\n        }\n      />\n\n      <IconButton\n        type=\"button\"\n        onClick={toggleModal}\n        aria-label=\"edit\"\n        sx={{ marginRight: '4px' }}\n      >\n        <EditIcon />\n      </IconButton>\n\n      {isModalOpen && (\n        <ModalWrapper onClose={toggleModal} open={isModalOpen}>\n          <Typography component=\"h3\" variant=\"h5\">\n            Edit contact\n          </Typography>\n          <ContactsForm\n            onSave={toggleModal}\n            actionOnSubmit={updateContact}\n            actionBtnText=\"Save changes\"\n            contact={contact}\n          />\n        </ModalWrapper>\n      )}\n\n      <IconButton type=\"button\" onClick={handleDelete} aria-label=\"delete\">\n        <DeleteIcon />\n      </IconButton>\n    </ListItem>\n  );\n};\n\nContactItem.propTypes = {\n  contact: PropTypes.exact({\n    name: PropTypes.string.isRequired,\n    number: PropTypes.string.isRequired,\n    id: PropTypes.string.isRequired,\n  }),\n};\n","import { useSelector } from 'react-redux';\nimport { selectVisibleContacts } from 'redux/contacts/contacts-selectors';\nimport { ContactItem } from '../ContactItem/ContactItem';\nimport List from '@mui/material/List';\n\nexport const ContactsList = () => {\n  const contacts = useSelector(selectVisibleContacts);\n\n  return (\n    <List sx={{ width: '100%', bgcolor: 'background.paper' }}>\n      {contacts.map(contact => (\n        <ContactItem key={contact.id} contact={contact} />\n      ))}\n    </List>\n  );\n};\n","import { useDispatch, useSelector } from 'react-redux';\nimport { selectFilter } from 'redux/contacts/contacts-selectors';\nimport { setFilter } from 'redux/contacts/contacts-filter-slice';\nimport { Box, TextField } from '@mui/material';\n\nexport const Filter = () => {\n  const filter = useSelector(selectFilter);\n  const dispatch = useDispatch();\n\n  const onFilterChange = e => {\n    const filterValue = e.target.value;\n    dispatch(setFilter(filterValue));\n  };\n\n  return (\n    <Box mb=\"16px\">\n      <TextField\n        autoComplete=\"given-name\"\n        name=\"filter\"\n        fullWidth\n        id=\"filter\"\n        label=\"Search field\"\n        autoFocus\n        onChange={onFilterChange}\n        value={filter}\n      />\n    </Box>\n  );\n};\n","import styled from 'styled-components';\nimport PropTypes from 'prop-types';\n\nconst NotiMes = styled.p`\n  font-size: 22px;\n  font-weight: 700;\n  color: #3f4f3d;\n`;\n\nexport const Notification = ({ message }) => {\n  return <NotiMes>{message}</NotiMes>;\n};\n\nNotification.propTypes = {\n  message: PropTypes.string.isRequired,\n};\n","import { useEffect, useState } from 'react';\nimport { useSelector, useDispatch } from 'react-redux';\nimport { fetchAllContacts } from 'redux/contacts/contacts-operations';\nimport { selectContacts } from 'redux/contacts/contacts-selectors';\nimport { addContact } from 'redux/contacts/contacts-operations';\nimport { ContactsForm } from 'components/ContactsForm/ContactsForm';\nimport { ModalWrapper } from 'components/Modal/Modal';\nimport { ContactsList } from 'components/ContactsList/ContactsList';\nimport { Filter } from 'components/Filter/Filter';\nimport { Loader } from 'components/Loader/Loader';\nimport { Notification } from 'components/Notification/Notification';\nimport PersonAddIcon from '@mui/icons-material/PersonAdd';\nimport {\n  useTheme,\n  Box,\n  Typography,\n  Container,\n  IconButton,\n} from '@mui/material';\n\nconst Contacts = () => {\n  const { items, isLoading, error, isRefresh } = useSelector(selectContacts);\n  const dispatch = useDispatch();\n  const theme = useTheme();\n\n  const [isModalOpen, setIsModalOpen] = useState(false);\n  const toggleModal = () => setIsModalOpen(state => !state);\n\n  useEffect(() => {\n    dispatch(fetchAllContacts());\n  }, [dispatch, isRefresh]);\n\n  return (\n    <Container\n      component=\"main\"\n      maxWidth=\"s\"\n      sx={{\n        position: 'relative',\n        maxWidth: 580,\n        backgroundColor: '#fff',\n        padding: '18px',\n        borderRadius: '10px',\n      }}\n    >\n      {isModalOpen && (\n        <>\n          <ModalWrapper onClose={toggleModal} open={isModalOpen}>\n            <Box>\n              <Typography\n                component=\"h3\"\n                variant=\"h5\"\n                textAlign=\"center\"\n                mt=\"16px\"\n                color={theme.palette.primary.main}\n              >\n                Add contact\n              </Typography>\n            </Box>\n            <ContactsForm\n              onSave={toggleModal}\n              actionOnSubmit={addContact}\n              actionBtnText=\"Add contact\"\n            />\n          </ModalWrapper>\n        </>\n      )}\n      <Box\n        sx={{\n          display: 'flex',\n          justifyContent: 'space-between',\n          alignItems: 'center',\n        }}\n      >\n        <Typography\n          component=\"h4\"\n          variant=\"h3\"\n          mt=\"16px\"\n          mb=\"16px\"\n          fontSize=\"2rem\"\n          color={theme.palette.primary.main}\n        >\n          Contacts\n        </Typography>\n        <IconButton\n          type=\"button\"\n          onClick={toggleModal}\n          aria-label=\"edit\"\n          sx={{ height: '40px' }}\n        >\n          <PersonAddIcon />\n        </IconButton>\n      </Box>\n      <Filter />\n      {isLoading && !error && <Loader position=\"flex-start\" height=\"50vh\" />}\n      {!isLoading && !error && !isRefresh && <ContactsList />}\n      {!isLoading && !error && items.length === 0 && (\n        <Notification message=\"There are no contacts\" />\n      )}\n    </Container>\n  );\n};\n\nexport default Contacts;\n"],"names":["selectContacts","state","contacts","selectFilter","filter","selectVisibleContacts","createSelector","items","normalizeFilter","toLowerCase","trim","contact","name","includes","contactsSchema","yup","shape","required","min","matches","number","ContactsForm","onSave","actionOnSubmit","actionBtnText","useSelector","dispatch","useDispatch","useForm","resolver","yupResolver","register","handleSubmit","reset","errors","formState","Container","component","sx","marginTop","display","flexDirection","alignItems","Box","noValidate","onSubmit","data","find","alert","Grid","container","spacing","item","xs","TextField","error","helperText","message","autoComplete","defaultValue","fullWidth","id","label","autoFocus","textTransform","Button","type","variant","mt","mb","style","position","top","left","transform","maxWidth","bgcolor","borderRadius","boxShadow","pt","px","pb","ModalWrapper","children","onClose","open","Modal","IconButton","onClick","right","Close","ContactItem","useState","isModalOpen","setIsModalOpen","toggleModal","avatarLetter","slice","toUpperCase","ListItem","borderBottom","ListItemAvatar","Avatar","ListItemText","primary","Typography","fontSize","fontWeight","secondary","color","marginRight","Edit","updateContact","deleteContact","Delete","ContactsList","List","width","map","Filter","onChange","e","filterValue","target","value","setFilter","NotiMes","styled","Notification","isLoading","isRefresh","theme","useTheme","useEffect","fetchAllContacts","backgroundColor","padding","textAlign","palette","main","addContact","justifyContent","height","PersonAdd","Loader","length"],"sourceRoot":""}